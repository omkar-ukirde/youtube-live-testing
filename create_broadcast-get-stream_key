<script src="https://apis.google.com/js/api.js"></script>
<script>
  /**
   * Sample JavaScript code for youtube.liveBroadcasts.insert
   * See instructions for running APIs Explorer code samples locally:
   * https://developers.google.com/explorer-help/guides/code_samples#javascript
   */

var broadcast_response, video_id;
var livestream_response;
	
	
  function authenticate() {
    return gapi.auth2.getAuthInstance()
        .signIn({scope: "https://www.googleapis.com/auth/youtube.force-ssl"})
        .then(function() { console.log("Sign-in successful"); },
              function(err) { console.error("Error signing in", err); });
  }
  function loadClient() {
    gapi.client.setApiKey("");
    return gapi.client.load("https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest")
        .then(function() { console.log("GAPI client loaded for API"); },
              function(err) { console.error("Error loading GAPI client for API", err); });
  }
  // Make sure the client is loaded and sign-in is complete before calling this method.
  function execute_create_broadcast() {
    return gapi.client.youtube.liveBroadcasts.insert({
      "part": "snippet,status,contentDetails",
      "resource": {
		
        "snippet": {
          "title": "Testing NodeJs 123",
          "scheduledStartTime": "2019-09-15T17:00:00+05:30",
          "scheduledEndTime": "2019-09-16T17:00:00+05:30"
        },
        "status": {
          "privacyStatus": "public",
          "recordingStatus": "recording",
		  
        },
        "contentDetails": {
          "monitorStream": {
            "enableMonitorStream": true
          }
        }
      }
    })
        .then(function(response) {
                // Handle the results here (response.result has the parsed body).
                console.log("Response", response);
		        broadcast_response = response;
		        video_id = response.result.id;
              },
              function(err) { console.error("Execute error", err); });
  }
	

  // Live Stream Insert.	
  // You get stream key. 
  // You need to provide title of video created above
  // Channel ID
  // Broadcast id received from above response.
	
  function execute_receive_stream_key() {
    return gapi.client.youtube.liveStreams.insert({
      "part": "snippet,id,status,cdn",
      "resource": {
        "snippet": {
          "title": "Testing NodeJs 123",
          "channelId": ""
        },
        "id": "",
        "status": {
          "streamStatus": "active"
        },
        "cdn": {
          "format": "240p",
          "ingestionType": "rtmp"
        }
      }
    })
        .then(function(response) {
                // Handle the results here (response.result has the parsed body).
                console.log("Response", response);
		        livestream_response = response;
              },
              function(err) { console.error("Execute error", err); });
  }	
	
function display() {
	
console.log(video_id);
// This is giving stream key   	
console.log(livestream_response.result.cdn.ingestionInfo);
}
	
  gapi.load("client:auth2", function() {
    gapi.auth2.init({client_id: ""});
  });
</script>
</br>
<button onclick="authenticate().then(loadClient)">authorize and load</button> </br> 
<button onclick="execute_create_broadcast()">execute to create broadcast in testing mode</button> </br>
<button onclick="execute_receive_stream_key()">execute to receive stream key.</button> </br>
<button onclick="display()">execute to display in console..</button> </br>

  
